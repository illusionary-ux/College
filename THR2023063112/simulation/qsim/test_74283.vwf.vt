// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/18/2024 23:53:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    test_74283
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test_74283_vlg_sample_tst(
	A1,
	A2,
	A3,
	A4,
	B1,
	B2,
	B3,
	B4,
	sampler_tx
);
input  A1;
input  A2;
input  A3;
input  A4;
input  B1;
input  B2;
input  B3;
input  B4;
output sampler_tx;

reg sample;
time current_time;
always @(A1 or A2 or A3 or A4 or B1 or B2 or B3 or B4)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module test_74283_vlg_check_tst (
	COUT,
	SUM1,
	SUM2,
	SUM3,
	SUM4,
	sampler_rx
);
input  COUT;
input  SUM1;
input  SUM2;
input  SUM3;
input  SUM4;
input sampler_rx;

reg  COUT_expected;
reg  SUM1_expected;
reg  SUM2_expected;
reg  SUM3_expected;
reg  SUM4_expected;

reg  COUT_prev;
reg  SUM1_prev;
reg  SUM2_prev;
reg  SUM3_prev;
reg  SUM4_prev;

reg  COUT_expected_prev;
reg  SUM1_expected_prev;
reg  SUM2_expected_prev;
reg  SUM3_expected_prev;
reg  SUM4_expected_prev;

reg  last_COUT_exp;
reg  last_SUM1_exp;
reg  last_SUM2_exp;
reg  last_SUM3_exp;
reg  last_SUM4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	COUT_prev = COUT;
	SUM1_prev = SUM1;
	SUM2_prev = SUM2;
	SUM3_prev = SUM3;
	SUM4_prev = SUM4;
end

// update expected /o prevs

always @(trigger)
begin
	COUT_expected_prev = COUT_expected;
	SUM1_expected_prev = SUM1_expected;
	SUM2_expected_prev = SUM2_expected;
	SUM3_expected_prev = SUM3_expected;
	SUM4_expected_prev = SUM4_expected;
end



// expected SUM1
initial
begin
	SUM1_expected = 1'bX;
end 

// expected SUM2
initial
begin
	SUM2_expected = 1'bX;
end 

// expected SUM3
initial
begin
	SUM3_expected = 1'bX;
end 

// expected SUM4
initial
begin
	SUM4_expected = 1'bX;
end 

// expected COUT
initial
begin
	COUT_expected = 1'bX;
end 
// generate trigger
always @(COUT_expected or COUT or SUM1_expected or SUM1 or SUM2_expected or SUM2 or SUM3_expected or SUM3 or SUM4_expected or SUM4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected COUT = %b | expected SUM1 = %b | expected SUM2 = %b | expected SUM3 = %b | expected SUM4 = %b | ",COUT_expected_prev,SUM1_expected_prev,SUM2_expected_prev,SUM3_expected_prev,SUM4_expected_prev);
	$display("| real COUT = %b | real SUM1 = %b | real SUM2 = %b | real SUM3 = %b | real SUM4 = %b | ",COUT_prev,SUM1_prev,SUM2_prev,SUM3_prev,SUM4_prev);
`endif
	if (
		( COUT_expected_prev !== 1'bx ) && ( COUT_prev !== COUT_expected_prev )
		&& ((COUT_expected_prev !== last_COUT_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port COUT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", COUT_expected_prev);
		$display ("     Real value = %b", COUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_COUT_exp = COUT_expected_prev;
	end
	if (
		( SUM1_expected_prev !== 1'bx ) && ( SUM1_prev !== SUM1_expected_prev )
		&& ((SUM1_expected_prev !== last_SUM1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SUM1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SUM1_expected_prev);
		$display ("     Real value = %b", SUM1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SUM1_exp = SUM1_expected_prev;
	end
	if (
		( SUM2_expected_prev !== 1'bx ) && ( SUM2_prev !== SUM2_expected_prev )
		&& ((SUM2_expected_prev !== last_SUM2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SUM2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SUM2_expected_prev);
		$display ("     Real value = %b", SUM2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SUM2_exp = SUM2_expected_prev;
	end
	if (
		( SUM3_expected_prev !== 1'bx ) && ( SUM3_prev !== SUM3_expected_prev )
		&& ((SUM3_expected_prev !== last_SUM3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SUM3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SUM3_expected_prev);
		$display ("     Real value = %b", SUM3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SUM3_exp = SUM3_expected_prev;
	end
	if (
		( SUM4_expected_prev !== 1'bx ) && ( SUM4_prev !== SUM4_expected_prev )
		&& ((SUM4_expected_prev !== last_SUM4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SUM4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SUM4_expected_prev);
		$display ("     Real value = %b", SUM4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SUM4_exp = SUM4_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module test_74283_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A1;
reg A2;
reg A3;
reg A4;
reg B1;
reg B2;
reg B3;
reg B4;
// wires                                               
wire COUT;
wire SUM1;
wire SUM2;
wire SUM3;
wire SUM4;

wire sampler;                             

// assign statements (if any)                          
test_74283 i1 (
// port map - connection between master ports and signals/registers   
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.A4(A4),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.B4(B4),
	.COUT(COUT),
	.SUM1(SUM1),
	.SUM2(SUM2),
	.SUM3(SUM3),
	.SUM4(SUM4)
);

// A4
initial
begin
	A4 = 1'b0;
end 

// A3
initial
begin
	A3 = 1'b1;
end 

// A2
initial
begin
	A2 = 1'b1;
end 

// A1
initial
begin
	A1 = 1'b0;
end 

// B4
initial
begin
	B4 = 1'b1;
end 

// B3
initial
begin
	B3 = 1'b0;
end 

// B2
initial
begin
	B2 = 1'b1;
end 

// B1
initial
begin
	B1 = 1'b1;
end 

test_74283_vlg_sample_tst tb_sample (
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.A4(A4),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.B4(B4),
	.sampler_tx(sampler)
);

test_74283_vlg_check_tst tb_out(
	.COUT(COUT),
	.SUM1(SUM1),
	.SUM2(SUM2),
	.SUM3(SUM3),
	.SUM4(SUM4),
	.sampler_rx(sampler)
);
endmodule

