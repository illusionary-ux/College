// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/14/2024 11:56:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    2023063114THR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module 2023063114THR_vlg_sample_tst(
	CLK,
	CLK2,
	sampler_tx
);
input  CLK;
input  CLK2;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CLK2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module 2023063114THR_vlg_check_tst (
	D0,
	D1,
	D2,
	D3,
	D4,
	D5,
	D6,
	H0,
	H1,
	H2,
	H3,
	H4,
	H5,
	H6,
	Q0,
	Q1,
	Q2,
	Q3,
	Q4,
	Q5,
	Q6,
	Q7,
	Y1,
	Y2,
	Y3,
	Y4,
	sampler_rx
);
input  D0;
input  D1;
input  D2;
input  D3;
input  D4;
input  D5;
input  D6;
input  H0;
input  H1;
input  H2;
input  H3;
input  H4;
input  H5;
input  H6;
input  Q0;
input  Q1;
input  Q2;
input  Q3;
input  Q4;
input  Q5;
input  Q6;
input  Q7;
input  Y1;
input  Y2;
input  Y3;
input  Y4;
input sampler_rx;

reg  D0_expected;
reg  D1_expected;
reg  D2_expected;
reg  D3_expected;
reg  D4_expected;
reg  D5_expected;
reg  D6_expected;
reg  H0_expected;
reg  H1_expected;
reg  H2_expected;
reg  H3_expected;
reg  H4_expected;
reg  H5_expected;
reg  H6_expected;
reg  Q0_expected;
reg  Q1_expected;
reg  Q2_expected;
reg  Q3_expected;
reg  Q4_expected;
reg  Q5_expected;
reg  Q6_expected;
reg  Q7_expected;
reg  Y1_expected;
reg  Y2_expected;
reg  Y3_expected;
reg  Y4_expected;

reg  D0_prev;
reg  D1_prev;
reg  D2_prev;
reg  D3_prev;
reg  D4_prev;
reg  D5_prev;
reg  D6_prev;
reg  H0_prev;
reg  H1_prev;
reg  H2_prev;
reg  H3_prev;
reg  H4_prev;
reg  H5_prev;
reg  H6_prev;
reg  Q0_prev;
reg  Q1_prev;
reg  Q2_prev;
reg  Q3_prev;
reg  Q4_prev;
reg  Q5_prev;
reg  Q6_prev;
reg  Q7_prev;
reg  Y1_prev;
reg  Y2_prev;
reg  Y3_prev;
reg  Y4_prev;

reg  D0_expected_prev;
reg  D1_expected_prev;
reg  D2_expected_prev;
reg  D3_expected_prev;
reg  D4_expected_prev;
reg  D5_expected_prev;
reg  D6_expected_prev;
reg  H0_expected_prev;
reg  H1_expected_prev;
reg  H2_expected_prev;
reg  H3_expected_prev;
reg  H4_expected_prev;
reg  H5_expected_prev;
reg  H6_expected_prev;
reg  Q0_expected_prev;
reg  Q1_expected_prev;
reg  Q2_expected_prev;
reg  Q3_expected_prev;
reg  Q4_expected_prev;
reg  Q5_expected_prev;
reg  Q6_expected_prev;
reg  Q7_expected_prev;
reg  Y1_expected_prev;
reg  Y2_expected_prev;
reg  Y3_expected_prev;
reg  Y4_expected_prev;

reg  last_D0_exp;
reg  last_D1_exp;
reg  last_D2_exp;
reg  last_D3_exp;
reg  last_D4_exp;
reg  last_D5_exp;
reg  last_D6_exp;
reg  last_H0_exp;
reg  last_H1_exp;
reg  last_H2_exp;
reg  last_H3_exp;
reg  last_H4_exp;
reg  last_H5_exp;
reg  last_H6_exp;
reg  last_Q0_exp;
reg  last_Q1_exp;
reg  last_Q2_exp;
reg  last_Q3_exp;
reg  last_Q4_exp;
reg  last_Q5_exp;
reg  last_Q6_exp;
reg  last_Q7_exp;
reg  last_Y1_exp;
reg  last_Y2_exp;
reg  last_Y3_exp;
reg  last_Y4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:26] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 26'b1;
end

// update real /o prevs

always @(trigger)
begin
	D0_prev = D0;
	D1_prev = D1;
	D2_prev = D2;
	D3_prev = D3;
	D4_prev = D4;
	D5_prev = D5;
	D6_prev = D6;
	H0_prev = H0;
	H1_prev = H1;
	H2_prev = H2;
	H3_prev = H3;
	H4_prev = H4;
	H5_prev = H5;
	H6_prev = H6;
	Q0_prev = Q0;
	Q1_prev = Q1;
	Q2_prev = Q2;
	Q3_prev = Q3;
	Q4_prev = Q4;
	Q5_prev = Q5;
	Q6_prev = Q6;
	Q7_prev = Q7;
	Y1_prev = Y1;
	Y2_prev = Y2;
	Y3_prev = Y3;
	Y4_prev = Y4;
end

// update expected /o prevs

always @(trigger)
begin
	D0_expected_prev = D0_expected;
	D1_expected_prev = D1_expected;
	D2_expected_prev = D2_expected;
	D3_expected_prev = D3_expected;
	D4_expected_prev = D4_expected;
	D5_expected_prev = D5_expected;
	D6_expected_prev = D6_expected;
	H0_expected_prev = H0_expected;
	H1_expected_prev = H1_expected;
	H2_expected_prev = H2_expected;
	H3_expected_prev = H3_expected;
	H4_expected_prev = H4_expected;
	H5_expected_prev = H5_expected;
	H6_expected_prev = H6_expected;
	Q0_expected_prev = Q0_expected;
	Q1_expected_prev = Q1_expected;
	Q2_expected_prev = Q2_expected;
	Q3_expected_prev = Q3_expected;
	Q4_expected_prev = Q4_expected;
	Q5_expected_prev = Q5_expected;
	Q6_expected_prev = Q6_expected;
	Q7_expected_prev = Q7_expected;
	Y1_expected_prev = Y1_expected;
	Y2_expected_prev = Y2_expected;
	Y3_expected_prev = Y3_expected;
	Y4_expected_prev = Y4_expected;
end



// expected D0
initial
begin
	D0_expected = 1'bX;
end 

// expected D1
initial
begin
	D1_expected = 1'bX;
end 

// expected D2
initial
begin
	D2_expected = 1'bX;
end 

// expected D3
initial
begin
	D3_expected = 1'bX;
end 

// expected D4
initial
begin
	D4_expected = 1'bX;
end 

// expected D5
initial
begin
	D5_expected = 1'bX;
end 

// expected D6
initial
begin
	D6_expected = 1'bX;
end 

// expected H0
initial
begin
	H0_expected = 1'bX;
end 

// expected H1
initial
begin
	H1_expected = 1'bX;
end 

// expected H2
initial
begin
	H2_expected = 1'bX;
end 

// expected H3
initial
begin
	H3_expected = 1'bX;
end 

// expected H4
initial
begin
	H4_expected = 1'bX;
end 

// expected H5
initial
begin
	H5_expected = 1'bX;
end 

// expected H6
initial
begin
	H6_expected = 1'bX;
end 

// expected Q0
initial
begin
	Q0_expected = 1'bX;
end 

// expected Q1
initial
begin
	Q1_expected = 1'bX;
end 

// expected Q2
initial
begin
	Q2_expected = 1'bX;
end 

// expected Q3
initial
begin
	Q3_expected = 1'bX;
end 

// expected Q4
initial
begin
	Q4_expected = 1'bX;
end 

// expected Q5
initial
begin
	Q5_expected = 1'bX;
end 

// expected Q6
initial
begin
	Q6_expected = 1'bX;
end 

// expected Q7
initial
begin
	Q7_expected = 1'bX;
end 

// expected Y1
initial
begin
	Y1_expected = 1'bX;
end 

// expected Y2
initial
begin
	Y2_expected = 1'bX;
end 

// expected Y3
initial
begin
	Y3_expected = 1'bX;
end 

// expected Y4
initial
begin
	Y4_expected = 1'bX;
end 
// generate trigger
always @(D0_expected or D0 or D1_expected or D1 or D2_expected or D2 or D3_expected or D3 or D4_expected or D4 or D5_expected or D5 or D6_expected or D6 or H0_expected or H0 or H1_expected or H1 or H2_expected or H2 or H3_expected or H3 or H4_expected or H4 or H5_expected or H5 or H6_expected or H6 or Q0_expected or Q0 or Q1_expected or Q1 or Q2_expected or Q2 or Q3_expected or Q3 or Q4_expected or Q4 or Q5_expected or Q5 or Q6_expected or Q6 or Q7_expected or Q7 or Y1_expected or Y1 or Y2_expected or Y2 or Y3_expected or Y3 or Y4_expected or Y4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected D0 = %b | expected D1 = %b | expected D2 = %b | expected D3 = %b | expected D4 = %b | expected D5 = %b | expected D6 = %b | expected H0 = %b | expected H1 = %b | expected H2 = %b | expected H3 = %b | expected H4 = %b | expected H5 = %b | expected H6 = %b | expected Q0 = %b | expected Q1 = %b | expected Q2 = %b | expected Q3 = %b | expected Q4 = %b | expected Q5 = %b | expected Q6 = %b | expected Q7 = %b | expected Y1 = %b | expected Y2 = %b | expected Y3 = %b | expected Y4 = %b | ",D0_expected_prev,D1_expected_prev,D2_expected_prev,D3_expected_prev,D4_expected_prev,D5_expected_prev,D6_expected_prev,H0_expected_prev,H1_expected_prev,H2_expected_prev,H3_expected_prev,H4_expected_prev,H5_expected_prev,H6_expected_prev,Q0_expected_prev,Q1_expected_prev,Q2_expected_prev,Q3_expected_prev,Q4_expected_prev,Q5_expected_prev,Q6_expected_prev,Q7_expected_prev,Y1_expected_prev,Y2_expected_prev,Y3_expected_prev,Y4_expected_prev);
	$display("| real D0 = %b | real D1 = %b | real D2 = %b | real D3 = %b | real D4 = %b | real D5 = %b | real D6 = %b | real H0 = %b | real H1 = %b | real H2 = %b | real H3 = %b | real H4 = %b | real H5 = %b | real H6 = %b | real Q0 = %b | real Q1 = %b | real Q2 = %b | real Q3 = %b | real Q4 = %b | real Q5 = %b | real Q6 = %b | real Q7 = %b | real Y1 = %b | real Y2 = %b | real Y3 = %b | real Y4 = %b | ",D0_prev,D1_prev,D2_prev,D3_prev,D4_prev,D5_prev,D6_prev,H0_prev,H1_prev,H2_prev,H3_prev,H4_prev,H5_prev,H6_prev,Q0_prev,Q1_prev,Q2_prev,Q3_prev,Q4_prev,Q5_prev,Q6_prev,Q7_prev,Y1_prev,Y2_prev,Y3_prev,Y4_prev);
`endif
	if (
		( D0_expected_prev !== 1'bx ) && ( D0_prev !== D0_expected_prev )
		&& ((D0_expected_prev !== last_D0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D0_expected_prev);
		$display ("     Real value = %b", D0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D0_exp = D0_expected_prev;
	end
	if (
		( D1_expected_prev !== 1'bx ) && ( D1_prev !== D1_expected_prev )
		&& ((D1_expected_prev !== last_D1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D1_exp = D1_expected_prev;
	end
	if (
		( D2_expected_prev !== 1'bx ) && ( D2_prev !== D2_expected_prev )
		&& ((D2_expected_prev !== last_D2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D2_exp = D2_expected_prev;
	end
	if (
		( D3_expected_prev !== 1'bx ) && ( D3_prev !== D3_expected_prev )
		&& ((D3_expected_prev !== last_D3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D3_exp = D3_expected_prev;
	end
	if (
		( D4_expected_prev !== 1'bx ) && ( D4_prev !== D4_expected_prev )
		&& ((D4_expected_prev !== last_D4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D4_expected_prev);
		$display ("     Real value = %b", D4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D4_exp = D4_expected_prev;
	end
	if (
		( D5_expected_prev !== 1'bx ) && ( D5_prev !== D5_expected_prev )
		&& ((D5_expected_prev !== last_D5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D5_expected_prev);
		$display ("     Real value = %b", D5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D5_exp = D5_expected_prev;
	end
	if (
		( D6_expected_prev !== 1'bx ) && ( D6_prev !== D6_expected_prev )
		&& ((D6_expected_prev !== last_D6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D6_expected_prev);
		$display ("     Real value = %b", D6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D6_exp = D6_expected_prev;
	end
	if (
		( H0_expected_prev !== 1'bx ) && ( H0_prev !== H0_expected_prev )
		&& ((H0_expected_prev !== last_H0_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H0_expected_prev);
		$display ("     Real value = %b", H0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_H0_exp = H0_expected_prev;
	end
	if (
		( H1_expected_prev !== 1'bx ) && ( H1_prev !== H1_expected_prev )
		&& ((H1_expected_prev !== last_H1_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H1_expected_prev);
		$display ("     Real value = %b", H1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_H1_exp = H1_expected_prev;
	end
	if (
		( H2_expected_prev !== 1'bx ) && ( H2_prev !== H2_expected_prev )
		&& ((H2_expected_prev !== last_H2_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H2_expected_prev);
		$display ("     Real value = %b", H2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_H2_exp = H2_expected_prev;
	end
	if (
		( H3_expected_prev !== 1'bx ) && ( H3_prev !== H3_expected_prev )
		&& ((H3_expected_prev !== last_H3_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H3_expected_prev);
		$display ("     Real value = %b", H3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_H3_exp = H3_expected_prev;
	end
	if (
		( H4_expected_prev !== 1'bx ) && ( H4_prev !== H4_expected_prev )
		&& ((H4_expected_prev !== last_H4_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H4_expected_prev);
		$display ("     Real value = %b", H4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_H4_exp = H4_expected_prev;
	end
	if (
		( H5_expected_prev !== 1'bx ) && ( H5_prev !== H5_expected_prev )
		&& ((H5_expected_prev !== last_H5_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H5_expected_prev);
		$display ("     Real value = %b", H5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_H5_exp = H5_expected_prev;
	end
	if (
		( H6_expected_prev !== 1'bx ) && ( H6_prev !== H6_expected_prev )
		&& ((H6_expected_prev !== last_H6_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H6_expected_prev);
		$display ("     Real value = %b", H6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_H6_exp = H6_expected_prev;
	end
	if (
		( Q0_expected_prev !== 1'bx ) && ( Q0_prev !== Q0_expected_prev )
		&& ((Q0_expected_prev !== last_Q0_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Q0_exp = Q0_expected_prev;
	end
	if (
		( Q1_expected_prev !== 1'bx ) && ( Q1_prev !== Q1_expected_prev )
		&& ((Q1_expected_prev !== last_Q1_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Q1_exp = Q1_expected_prev;
	end
	if (
		( Q2_expected_prev !== 1'bx ) && ( Q2_prev !== Q2_expected_prev )
		&& ((Q2_expected_prev !== last_Q2_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_Q2_exp = Q2_expected_prev;
	end
	if (
		( Q3_expected_prev !== 1'bx ) && ( Q3_prev !== Q3_expected_prev )
		&& ((Q3_expected_prev !== last_Q3_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Q3_exp = Q3_expected_prev;
	end
	if (
		( Q4_expected_prev !== 1'bx ) && ( Q4_prev !== Q4_expected_prev )
		&& ((Q4_expected_prev !== last_Q4_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q4_expected_prev);
		$display ("     Real value = %b", Q4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_Q4_exp = Q4_expected_prev;
	end
	if (
		( Q5_expected_prev !== 1'bx ) && ( Q5_prev !== Q5_expected_prev )
		&& ((Q5_expected_prev !== last_Q5_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q5_expected_prev);
		$display ("     Real value = %b", Q5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_Q5_exp = Q5_expected_prev;
	end
	if (
		( Q6_expected_prev !== 1'bx ) && ( Q6_prev !== Q6_expected_prev )
		&& ((Q6_expected_prev !== last_Q6_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q6_expected_prev);
		$display ("     Real value = %b", Q6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_Q6_exp = Q6_expected_prev;
	end
	if (
		( Q7_expected_prev !== 1'bx ) && ( Q7_prev !== Q7_expected_prev )
		&& ((Q7_expected_prev !== last_Q7_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q7_expected_prev);
		$display ("     Real value = %b", Q7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_Q7_exp = Q7_expected_prev;
	end
	if (
		( Y1_expected_prev !== 1'bx ) && ( Y1_prev !== Y1_expected_prev )
		&& ((Y1_expected_prev !== last_Y1_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y1_expected_prev);
		$display ("     Real value = %b", Y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_Y1_exp = Y1_expected_prev;
	end
	if (
		( Y2_expected_prev !== 1'bx ) && ( Y2_prev !== Y2_expected_prev )
		&& ((Y2_expected_prev !== last_Y2_exp) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y2_expected_prev);
		$display ("     Real value = %b", Y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_Y2_exp = Y2_expected_prev;
	end
	if (
		( Y3_expected_prev !== 1'bx ) && ( Y3_prev !== Y3_expected_prev )
		&& ((Y3_expected_prev !== last_Y3_exp) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y3_expected_prev);
		$display ("     Real value = %b", Y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_Y3_exp = Y3_expected_prev;
	end
	if (
		( Y4_expected_prev !== 1'bx ) && ( Y4_prev !== Y4_expected_prev )
		&& ((Y4_expected_prev !== last_Y4_exp) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y4_expected_prev);
		$display ("     Real value = %b", Y4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_Y4_exp = Y4_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module 2023063114THR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLK2;
// wires                                               
wire D0;
wire D1;
wire D2;
wire D3;
wire D4;
wire D5;
wire D6;
wire H0;
wire H1;
wire H2;
wire H3;
wire H4;
wire H5;
wire H6;
wire Q0;
wire Q1;
wire Q2;
wire Q3;
wire Q4;
wire Q5;
wire Q6;
wire Q7;
wire Y1;
wire Y2;
wire Y3;
wire Y4;

wire sampler;                             

// assign statements (if any)                          
2023063114THR i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CLK2(CLK2),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.D6(D6),
	.H0(H0),
	.H1(H1),
	.H2(H2),
	.H3(H3),
	.H4(H4),
	.H5(H5),
	.H6(H6),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.Q4(Q4),
	.Q5(Q5),
	.Q6(Q6),
	.Q7(Q7),
	.Y1(Y1),
	.Y2(Y2),
	.Y3(Y3),
	.Y4(Y4)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// CLK2
always
begin
	CLK2 = 1'b0;
	CLK2 = #10000 1'b1;
	#10000;
end 

2023063114THR_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CLK2(CLK2),
	.sampler_tx(sampler)
);

2023063114THR_vlg_check_tst tb_out(
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.D6(D6),
	.H0(H0),
	.H1(H1),
	.H2(H2),
	.H3(H3),
	.H4(H4),
	.H5(H5),
	.H6(H6),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.Q4(Q4),
	.Q5(Q5),
	.Q6(Q6),
	.Q7(Q7),
	.Y1(Y1),
	.Y2(Y2),
	.Y3(Y3),
	.Y4(Y4),
	.sampler_rx(sampler)
);
endmodule

