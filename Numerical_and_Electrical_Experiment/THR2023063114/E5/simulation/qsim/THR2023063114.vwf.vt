// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/08/2024 18:44:02"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    THR2023063114
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module THR2023063114_vlg_sample_tst(
	a1,
	a2,
	a3,
	a4,
	a5,
	a6,
	a7,
	a8,
	a9,
	sampler_tx
);
input  a1;
input  a2;
input  a3;
input  a4;
input  a5;
input  a6;
input  a7;
input  a8;
input  a9;
output sampler_tx;

reg sample;
time current_time;
always @(a1 or a2 or a3 or a4 or a5 or a6 or a7 or a8 or a9)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module THR2023063114_vlg_check_tst (
	LED1,
	LED2,
	LED3,
	LED4,
	OA,
	OB,
	OC,
	OD,
	OE,
	OF,
	OG,
	sampler_rx
);
input  LED1;
input  LED2;
input  LED3;
input  LED4;
input  OA;
input  OB;
input  OC;
input  OD;
input  OE;
input  OF;
input  OG;
input sampler_rx;

reg  LED1_expected;
reg  LED2_expected;
reg  LED3_expected;
reg  LED4_expected;
reg  OA_expected;
reg  OB_expected;
reg  OC_expected;
reg  OD_expected;
reg  OE_expected;
reg  OF_expected;
reg  OG_expected;

reg  LED1_prev;
reg  LED2_prev;
reg  LED3_prev;
reg  LED4_prev;
reg  OA_prev;
reg  OB_prev;
reg  OC_prev;
reg  OD_prev;
reg  OE_prev;
reg  OF_prev;
reg  OG_prev;

reg  LED1_expected_prev;
reg  LED2_expected_prev;
reg  LED3_expected_prev;
reg  LED4_expected_prev;
reg  OA_expected_prev;
reg  OB_expected_prev;
reg  OC_expected_prev;
reg  OD_expected_prev;
reg  OE_expected_prev;
reg  OF_expected_prev;
reg  OG_expected_prev;

reg  last_LED1_exp;
reg  last_LED2_exp;
reg  last_LED3_exp;
reg  last_LED4_exp;
reg  last_OA_exp;
reg  last_OB_exp;
reg  last_OC_exp;
reg  last_OD_exp;
reg  last_OE_exp;
reg  last_OF_exp;
reg  last_OG_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	LED1_prev = LED1;
	LED2_prev = LED2;
	LED3_prev = LED3;
	LED4_prev = LED4;
	OA_prev = OA;
	OB_prev = OB;
	OC_prev = OC;
	OD_prev = OD;
	OE_prev = OE;
	OF_prev = OF;
	OG_prev = OG;
end

// update expected /o prevs

always @(trigger)
begin
	LED1_expected_prev = LED1_expected;
	LED2_expected_prev = LED2_expected;
	LED3_expected_prev = LED3_expected;
	LED4_expected_prev = LED4_expected;
	OA_expected_prev = OA_expected;
	OB_expected_prev = OB_expected;
	OC_expected_prev = OC_expected;
	OD_expected_prev = OD_expected;
	OE_expected_prev = OE_expected;
	OF_expected_prev = OF_expected;
	OG_expected_prev = OG_expected;
end



// expected LED1
initial
begin
	LED1_expected = 1'bX;
end 

// expected LED2
initial
begin
	LED2_expected = 1'bX;
end 

// expected LED3
initial
begin
	LED3_expected = 1'bX;
end 

// expected LED4
initial
begin
	LED4_expected = 1'bX;
end 

// expected OA
initial
begin
	OA_expected = 1'bX;
end 

// expected OB
initial
begin
	OB_expected = 1'bX;
end 

// expected OC
initial
begin
	OC_expected = 1'bX;
end 

// expected OD
initial
begin
	OD_expected = 1'bX;
end 

// expected OE
initial
begin
	OE_expected = 1'bX;
end 

// expected OF
initial
begin
	OF_expected = 1'bX;
end 

// expected OG
initial
begin
	OG_expected = 1'bX;
end 
// generate trigger
always @(LED1_expected or LED1 or LED2_expected or LED2 or LED3_expected or LED3 or LED4_expected or LED4 or OA_expected or OA or OB_expected or OB or OC_expected or OC or OD_expected or OD or OE_expected or OE or OF_expected or OF or OG_expected or OG)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LED1 = %b | expected LED2 = %b | expected LED3 = %b | expected LED4 = %b | expected OA = %b | expected OB = %b | expected OC = %b | expected OD = %b | expected OE = %b | expected OF = %b | expected OG = %b | ",LED1_expected_prev,LED2_expected_prev,LED3_expected_prev,LED4_expected_prev,OA_expected_prev,OB_expected_prev,OC_expected_prev,OD_expected_prev,OE_expected_prev,OF_expected_prev,OG_expected_prev);
	$display("| real LED1 = %b | real LED2 = %b | real LED3 = %b | real LED4 = %b | real OA = %b | real OB = %b | real OC = %b | real OD = %b | real OE = %b | real OF = %b | real OG = %b | ",LED1_prev,LED2_prev,LED3_prev,LED4_prev,OA_prev,OB_prev,OC_prev,OD_prev,OE_prev,OF_prev,OG_prev);
`endif
	if (
		( LED1_expected_prev !== 1'bx ) && ( LED1_prev !== LED1_expected_prev )
		&& ((LED1_expected_prev !== last_LED1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED1_expected_prev);
		$display ("     Real value = %b", LED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LED1_exp = LED1_expected_prev;
	end
	if (
		( LED2_expected_prev !== 1'bx ) && ( LED2_prev !== LED2_expected_prev )
		&& ((LED2_expected_prev !== last_LED2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED2_expected_prev);
		$display ("     Real value = %b", LED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LED2_exp = LED2_expected_prev;
	end
	if (
		( LED3_expected_prev !== 1'bx ) && ( LED3_prev !== LED3_expected_prev )
		&& ((LED3_expected_prev !== last_LED3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED3_expected_prev);
		$display ("     Real value = %b", LED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED3_exp = LED3_expected_prev;
	end
	if (
		( LED4_expected_prev !== 1'bx ) && ( LED4_prev !== LED4_expected_prev )
		&& ((LED4_expected_prev !== last_LED4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED4_expected_prev);
		$display ("     Real value = %b", LED4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED4_exp = LED4_expected_prev;
	end
	if (
		( OA_expected_prev !== 1'bx ) && ( OA_prev !== OA_expected_prev )
		&& ((OA_expected_prev !== last_OA_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OA_expected_prev);
		$display ("     Real value = %b", OA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OA_exp = OA_expected_prev;
	end
	if (
		( OB_expected_prev !== 1'bx ) && ( OB_prev !== OB_expected_prev )
		&& ((OB_expected_prev !== last_OB_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OB_expected_prev);
		$display ("     Real value = %b", OB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OB_exp = OB_expected_prev;
	end
	if (
		( OC_expected_prev !== 1'bx ) && ( OC_prev !== OC_expected_prev )
		&& ((OC_expected_prev !== last_OC_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OC_expected_prev);
		$display ("     Real value = %b", OC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OC_exp = OC_expected_prev;
	end
	if (
		( OD_expected_prev !== 1'bx ) && ( OD_prev !== OD_expected_prev )
		&& ((OD_expected_prev !== last_OD_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OD_expected_prev);
		$display ("     Real value = %b", OD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OD_exp = OD_expected_prev;
	end
	if (
		( OE_expected_prev !== 1'bx ) && ( OE_prev !== OE_expected_prev )
		&& ((OE_expected_prev !== last_OE_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OE_expected_prev);
		$display ("     Real value = %b", OE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_OE_exp = OE_expected_prev;
	end
	if (
		( OF_expected_prev !== 1'bx ) && ( OF_prev !== OF_expected_prev )
		&& ((OF_expected_prev !== last_OF_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OF_expected_prev);
		$display ("     Real value = %b", OF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_OF_exp = OF_expected_prev;
	end
	if (
		( OG_expected_prev !== 1'bx ) && ( OG_prev !== OG_expected_prev )
		&& ((OG_expected_prev !== last_OG_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OG_expected_prev);
		$display ("     Real value = %b", OG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_OG_exp = OG_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module THR2023063114_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a1;
reg a2;
reg a3;
reg a4;
reg a5;
reg a6;
reg a7;
reg a8;
reg a9;
// wires                                               
wire LED1;
wire LED2;
wire LED3;
wire LED4;
wire OA;
wire OB;
wire OC;
wire OD;
wire OE;
wire OF;
wire OG;

wire sampler;                             

// assign statements (if any)                          
THR2023063114 i1 (
// port map - connection between master ports and signals/registers   
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.a4(a4),
	.a5(a5),
	.a6(a6),
	.a7(a7),
	.a8(a8),
	.a9(a9),
	.LED1(LED1),
	.LED2(LED2),
	.LED3(LED3),
	.LED4(LED4),
	.OA(OA),
	.OB(OB),
	.OC(OC),
	.OD(OD),
	.OE(OE),
	.OF(OF),
	.OG(OG)
);

// a1
initial
begin
	a1 = 1'b0;
end 

// a2
initial
begin
	a2 = 1'b0;
end 

// a3
initial
begin
	a3 = 1'b0;
end 

// a4
initial
begin
	a4 = 1'b0;
end 

// a5
initial
begin
	a5 = 1'b0;
end 

// a6
initial
begin
	a6 = 1'b0;
	a6 = #800000 1'b1;
end 

// a7
initial
begin
	a7 = 1'b0;
	a7 = #400000 1'b1;
	a7 = #400000 1'b0;
end 

// a8
initial
begin
	repeat(2)
	begin
		a8 = 1'b0;
		a8 = #200000 1'b1;
		# 200000;
	end
	a8 = 1'b0;
end 

// a9
always
begin
	a9 = 1'b0;
	a9 = #100000 1'b1;
	#100000;
end 

THR2023063114_vlg_sample_tst tb_sample (
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.a4(a4),
	.a5(a5),
	.a6(a6),
	.a7(a7),
	.a8(a8),
	.a9(a9),
	.sampler_tx(sampler)
);

THR2023063114_vlg_check_tst tb_out(
	.LED1(LED1),
	.LED2(LED2),
	.LED3(LED3),
	.LED4(LED4),
	.OA(OA),
	.OB(OB),
	.OC(OC),
	.OD(OD),
	.OE(OE),
	.OF(OF),
	.OG(OG),
	.sampler_rx(sampler)
);
endmodule

