// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/29/2024 10:18:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Final
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Final_vlg_sample_tst(
	CL,
	CLK,
	RST,
	sampler_tx
);
input  CL;
input  CLK;
input  RST;
output sampler_tx;

reg sample;
time current_time;
always @(CL or CLK or RST)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Final_vlg_check_tst (
	a0,
	a1,
	a2,
	a3,
	a4,
	a5,
	a6,
	a7,
	EWG,
	EWR,
	EWY,
	H0,
	H1,
	H2,
	H3,
	H4,
	H5,
	H6,
	L0,
	L1,
	L2,
	L3,
	L4,
	L5,
	L6,
	NSG,
	NSR,
	NSY,
	sampler_rx
);
input  a0;
input  a1;
input  a2;
input  a3;
input  a4;
input  a5;
input  a6;
input  a7;
input  EWG;
input  EWR;
input  EWY;
input  H0;
input  H1;
input  H2;
input  H3;
input  H4;
input  H5;
input  H6;
input  L0;
input  L1;
input  L2;
input  L3;
input  L4;
input  L5;
input  L6;
input  NSG;
input  NSR;
input  NSY;
input sampler_rx;

reg  a0_expected;
reg  a1_expected;
reg  a2_expected;
reg  a3_expected;
reg  a4_expected;
reg  a5_expected;
reg  a6_expected;
reg  a7_expected;
reg  EWG_expected;
reg  EWR_expected;
reg  EWY_expected;
reg  H0_expected;
reg  H1_expected;
reg  H2_expected;
reg  H3_expected;
reg  H4_expected;
reg  H5_expected;
reg  H6_expected;
reg  L0_expected;
reg  L1_expected;
reg  L2_expected;
reg  L3_expected;
reg  L4_expected;
reg  L5_expected;
reg  L6_expected;
reg  NSG_expected;
reg  NSR_expected;
reg  NSY_expected;

reg  a0_prev;
reg  a1_prev;
reg  a2_prev;
reg  a3_prev;
reg  a4_prev;
reg  a5_prev;
reg  a6_prev;
reg  a7_prev;
reg  EWG_prev;
reg  EWR_prev;
reg  EWY_prev;
reg  H0_prev;
reg  H1_prev;
reg  H2_prev;
reg  H3_prev;
reg  H4_prev;
reg  H5_prev;
reg  H6_prev;
reg  L0_prev;
reg  L1_prev;
reg  L2_prev;
reg  L3_prev;
reg  L4_prev;
reg  L5_prev;
reg  L6_prev;
reg  NSG_prev;
reg  NSR_prev;
reg  NSY_prev;

reg  a0_expected_prev;
reg  a1_expected_prev;
reg  a2_expected_prev;
reg  a3_expected_prev;
reg  a4_expected_prev;
reg  a5_expected_prev;
reg  a6_expected_prev;
reg  a7_expected_prev;
reg  EWG_expected_prev;
reg  EWR_expected_prev;
reg  EWY_expected_prev;
reg  H0_expected_prev;
reg  H1_expected_prev;
reg  H2_expected_prev;
reg  H3_expected_prev;
reg  H4_expected_prev;
reg  H5_expected_prev;
reg  H6_expected_prev;
reg  L0_expected_prev;
reg  L1_expected_prev;
reg  L2_expected_prev;
reg  L3_expected_prev;
reg  L4_expected_prev;
reg  L5_expected_prev;
reg  L6_expected_prev;
reg  NSG_expected_prev;
reg  NSR_expected_prev;
reg  NSY_expected_prev;

reg  last_a0_exp;
reg  last_a1_exp;
reg  last_a2_exp;
reg  last_a3_exp;
reg  last_a4_exp;
reg  last_a5_exp;
reg  last_a6_exp;
reg  last_a7_exp;
reg  last_EWG_exp;
reg  last_EWR_exp;
reg  last_EWY_exp;
reg  last_H0_exp;
reg  last_H1_exp;
reg  last_H2_exp;
reg  last_H3_exp;
reg  last_H4_exp;
reg  last_H5_exp;
reg  last_H6_exp;
reg  last_L0_exp;
reg  last_L1_exp;
reg  last_L2_exp;
reg  last_L3_exp;
reg  last_L4_exp;
reg  last_L5_exp;
reg  last_L6_exp;
reg  last_NSG_exp;
reg  last_NSR_exp;
reg  last_NSY_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:28] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 28'b1;
end

// update real /o prevs

always @(trigger)
begin
	a0_prev = a0;
	a1_prev = a1;
	a2_prev = a2;
	a3_prev = a3;
	a4_prev = a4;
	a5_prev = a5;
	a6_prev = a6;
	a7_prev = a7;
	EWG_prev = EWG;
	EWR_prev = EWR;
	EWY_prev = EWY;
	H0_prev = H0;
	H1_prev = H1;
	H2_prev = H2;
	H3_prev = H3;
	H4_prev = H4;
	H5_prev = H5;
	H6_prev = H6;
	L0_prev = L0;
	L1_prev = L1;
	L2_prev = L2;
	L3_prev = L3;
	L4_prev = L4;
	L5_prev = L5;
	L6_prev = L6;
	NSG_prev = NSG;
	NSR_prev = NSR;
	NSY_prev = NSY;
end

// update expected /o prevs

always @(trigger)
begin
	a0_expected_prev = a0_expected;
	a1_expected_prev = a1_expected;
	a2_expected_prev = a2_expected;
	a3_expected_prev = a3_expected;
	a4_expected_prev = a4_expected;
	a5_expected_prev = a5_expected;
	a6_expected_prev = a6_expected;
	a7_expected_prev = a7_expected;
	EWG_expected_prev = EWG_expected;
	EWR_expected_prev = EWR_expected;
	EWY_expected_prev = EWY_expected;
	H0_expected_prev = H0_expected;
	H1_expected_prev = H1_expected;
	H2_expected_prev = H2_expected;
	H3_expected_prev = H3_expected;
	H4_expected_prev = H4_expected;
	H5_expected_prev = H5_expected;
	H6_expected_prev = H6_expected;
	L0_expected_prev = L0_expected;
	L1_expected_prev = L1_expected;
	L2_expected_prev = L2_expected;
	L3_expected_prev = L3_expected;
	L4_expected_prev = L4_expected;
	L5_expected_prev = L5_expected;
	L6_expected_prev = L6_expected;
	NSG_expected_prev = NSG_expected;
	NSR_expected_prev = NSR_expected;
	NSY_expected_prev = NSY_expected;
end



// expected a0
initial
begin
	a0_expected = 1'bX;
end 

// expected a1
initial
begin
	a1_expected = 1'bX;
end 

// expected a2
initial
begin
	a2_expected = 1'bX;
end 

// expected a3
initial
begin
	a3_expected = 1'bX;
end 

// expected a4
initial
begin
	a4_expected = 1'bX;
end 

// expected a5
initial
begin
	a5_expected = 1'bX;
end 

// expected a6
initial
begin
	a6_expected = 1'bX;
end 

// expected a7
initial
begin
	a7_expected = 1'bX;
end 

// expected EWG
initial
begin
	EWG_expected = 1'bX;
end 

// expected EWR
initial
begin
	EWR_expected = 1'bX;
end 

// expected EWY
initial
begin
	EWY_expected = 1'bX;
end 

// expected H0
initial
begin
	H0_expected = 1'bX;
end 

// expected H1
initial
begin
	H1_expected = 1'bX;
end 

// expected H2
initial
begin
	H2_expected = 1'bX;
end 

// expected H3
initial
begin
	H3_expected = 1'bX;
end 

// expected H4
initial
begin
	H4_expected = 1'bX;
end 

// expected H5
initial
begin
	H5_expected = 1'bX;
end 

// expected H6
initial
begin
	H6_expected = 1'bX;
end 

// expected L0
initial
begin
	L0_expected = 1'bX;
end 

// expected L1
initial
begin
	L1_expected = 1'bX;
end 

// expected L2
initial
begin
	L2_expected = 1'bX;
end 

// expected L3
initial
begin
	L3_expected = 1'bX;
end 

// expected L4
initial
begin
	L4_expected = 1'bX;
end 

// expected L5
initial
begin
	L5_expected = 1'bX;
end 

// expected L6
initial
begin
	L6_expected = 1'bX;
end 

// expected NSG
initial
begin
	NSG_expected = 1'bX;
end 

// expected NSR
initial
begin
	NSR_expected = 1'bX;
end 

// expected NSY
initial
begin
	NSY_expected = 1'bX;
end 
// generate trigger
always @(a0_expected or a0 or a1_expected or a1 or a2_expected or a2 or a3_expected or a3 or a4_expected or a4 or a5_expected or a5 or a6_expected or a6 or a7_expected or a7 or EWG_expected or EWG or EWR_expected or EWR or EWY_expected or EWY or H0_expected or H0 or H1_expected or H1 or H2_expected or H2 or H3_expected or H3 or H4_expected or H4 or H5_expected or H5 or H6_expected or H6 or L0_expected or L0 or L1_expected or L1 or L2_expected or L2 or L3_expected or L3 or L4_expected or L4 or L5_expected or L5 or L6_expected or L6 or NSG_expected or NSG or NSR_expected or NSR or NSY_expected or NSY)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a0 = %b | expected a1 = %b | expected a2 = %b | expected a3 = %b | expected a4 = %b | expected a5 = %b | expected a6 = %b | expected a7 = %b | expected EWG = %b | expected EWR = %b | expected EWY = %b | expected H0 = %b | expected H1 = %b | expected H2 = %b | expected H3 = %b | expected H4 = %b | expected H5 = %b | expected H6 = %b | expected L0 = %b | expected L1 = %b | expected L2 = %b | expected L3 = %b | expected L4 = %b | expected L5 = %b | expected L6 = %b | expected NSG = %b | expected NSR = %b | expected NSY = %b | ",a0_expected_prev,a1_expected_prev,a2_expected_prev,a3_expected_prev,a4_expected_prev,a5_expected_prev,a6_expected_prev,a7_expected_prev,EWG_expected_prev,EWR_expected_prev,EWY_expected_prev,H0_expected_prev,H1_expected_prev,H2_expected_prev,H3_expected_prev,H4_expected_prev,H5_expected_prev,H6_expected_prev,L0_expected_prev,L1_expected_prev,L2_expected_prev,L3_expected_prev,L4_expected_prev,L5_expected_prev,L6_expected_prev,NSG_expected_prev,NSR_expected_prev,NSY_expected_prev);
	$display("| real a0 = %b | real a1 = %b | real a2 = %b | real a3 = %b | real a4 = %b | real a5 = %b | real a6 = %b | real a7 = %b | real EWG = %b | real EWR = %b | real EWY = %b | real H0 = %b | real H1 = %b | real H2 = %b | real H3 = %b | real H4 = %b | real H5 = %b | real H6 = %b | real L0 = %b | real L1 = %b | real L2 = %b | real L3 = %b | real L4 = %b | real L5 = %b | real L6 = %b | real NSG = %b | real NSR = %b | real NSY = %b | ",a0_prev,a1_prev,a2_prev,a3_prev,a4_prev,a5_prev,a6_prev,a7_prev,EWG_prev,EWR_prev,EWY_prev,H0_prev,H1_prev,H2_prev,H3_prev,H4_prev,H5_prev,H6_prev,L0_prev,L1_prev,L2_prev,L3_prev,L4_prev,L5_prev,L6_prev,NSG_prev,NSR_prev,NSY_prev);
`endif
	if (
		( a0_expected_prev !== 1'bx ) && ( a0_prev !== a0_expected_prev )
		&& ((a0_expected_prev !== last_a0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a0_expected_prev);
		$display ("     Real value = %b", a0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a0_exp = a0_expected_prev;
	end
	if (
		( a1_expected_prev !== 1'bx ) && ( a1_prev !== a1_expected_prev )
		&& ((a1_expected_prev !== last_a1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a1_expected_prev);
		$display ("     Real value = %b", a1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_a1_exp = a1_expected_prev;
	end
	if (
		( a2_expected_prev !== 1'bx ) && ( a2_prev !== a2_expected_prev )
		&& ((a2_expected_prev !== last_a2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a2_expected_prev);
		$display ("     Real value = %b", a2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_a2_exp = a2_expected_prev;
	end
	if (
		( a3_expected_prev !== 1'bx ) && ( a3_prev !== a3_expected_prev )
		&& ((a3_expected_prev !== last_a3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a3_expected_prev);
		$display ("     Real value = %b", a3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_a3_exp = a3_expected_prev;
	end
	if (
		( a4_expected_prev !== 1'bx ) && ( a4_prev !== a4_expected_prev )
		&& ((a4_expected_prev !== last_a4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a4_expected_prev);
		$display ("     Real value = %b", a4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_a4_exp = a4_expected_prev;
	end
	if (
		( a5_expected_prev !== 1'bx ) && ( a5_prev !== a5_expected_prev )
		&& ((a5_expected_prev !== last_a5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a5_expected_prev);
		$display ("     Real value = %b", a5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_a5_exp = a5_expected_prev;
	end
	if (
		( a6_expected_prev !== 1'bx ) && ( a6_prev !== a6_expected_prev )
		&& ((a6_expected_prev !== last_a6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a6_expected_prev);
		$display ("     Real value = %b", a6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_a6_exp = a6_expected_prev;
	end
	if (
		( a7_expected_prev !== 1'bx ) && ( a7_prev !== a7_expected_prev )
		&& ((a7_expected_prev !== last_a7_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a7_expected_prev);
		$display ("     Real value = %b", a7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_a7_exp = a7_expected_prev;
	end
	if (
		( EWG_expected_prev !== 1'bx ) && ( EWG_prev !== EWG_expected_prev )
		&& ((EWG_expected_prev !== last_EWG_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EWG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EWG_expected_prev);
		$display ("     Real value = %b", EWG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EWG_exp = EWG_expected_prev;
	end
	if (
		( EWR_expected_prev !== 1'bx ) && ( EWR_prev !== EWR_expected_prev )
		&& ((EWR_expected_prev !== last_EWR_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EWR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EWR_expected_prev);
		$display ("     Real value = %b", EWR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EWR_exp = EWR_expected_prev;
	end
	if (
		( EWY_expected_prev !== 1'bx ) && ( EWY_prev !== EWY_expected_prev )
		&& ((EWY_expected_prev !== last_EWY_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EWY :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EWY_expected_prev);
		$display ("     Real value = %b", EWY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_EWY_exp = EWY_expected_prev;
	end
	if (
		( H0_expected_prev !== 1'bx ) && ( H0_prev !== H0_expected_prev )
		&& ((H0_expected_prev !== last_H0_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H0_expected_prev);
		$display ("     Real value = %b", H0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_H0_exp = H0_expected_prev;
	end
	if (
		( H1_expected_prev !== 1'bx ) && ( H1_prev !== H1_expected_prev )
		&& ((H1_expected_prev !== last_H1_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H1_expected_prev);
		$display ("     Real value = %b", H1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_H1_exp = H1_expected_prev;
	end
	if (
		( H2_expected_prev !== 1'bx ) && ( H2_prev !== H2_expected_prev )
		&& ((H2_expected_prev !== last_H2_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H2_expected_prev);
		$display ("     Real value = %b", H2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_H2_exp = H2_expected_prev;
	end
	if (
		( H3_expected_prev !== 1'bx ) && ( H3_prev !== H3_expected_prev )
		&& ((H3_expected_prev !== last_H3_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H3_expected_prev);
		$display ("     Real value = %b", H3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_H3_exp = H3_expected_prev;
	end
	if (
		( H4_expected_prev !== 1'bx ) && ( H4_prev !== H4_expected_prev )
		&& ((H4_expected_prev !== last_H4_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H4_expected_prev);
		$display ("     Real value = %b", H4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_H4_exp = H4_expected_prev;
	end
	if (
		( H5_expected_prev !== 1'bx ) && ( H5_prev !== H5_expected_prev )
		&& ((H5_expected_prev !== last_H5_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H5_expected_prev);
		$display ("     Real value = %b", H5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_H5_exp = H5_expected_prev;
	end
	if (
		( H6_expected_prev !== 1'bx ) && ( H6_prev !== H6_expected_prev )
		&& ((H6_expected_prev !== last_H6_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H6_expected_prev);
		$display ("     Real value = %b", H6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_H6_exp = H6_expected_prev;
	end
	if (
		( L0_expected_prev !== 1'bx ) && ( L0_prev !== L0_expected_prev )
		&& ((L0_expected_prev !== last_L0_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L0_expected_prev);
		$display ("     Real value = %b", L0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_L0_exp = L0_expected_prev;
	end
	if (
		( L1_expected_prev !== 1'bx ) && ( L1_prev !== L1_expected_prev )
		&& ((L1_expected_prev !== last_L1_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L1_expected_prev);
		$display ("     Real value = %b", L1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_L1_exp = L1_expected_prev;
	end
	if (
		( L2_expected_prev !== 1'bx ) && ( L2_prev !== L2_expected_prev )
		&& ((L2_expected_prev !== last_L2_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L2_expected_prev);
		$display ("     Real value = %b", L2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_L2_exp = L2_expected_prev;
	end
	if (
		( L3_expected_prev !== 1'bx ) && ( L3_prev !== L3_expected_prev )
		&& ((L3_expected_prev !== last_L3_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L3_expected_prev);
		$display ("     Real value = %b", L3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_L3_exp = L3_expected_prev;
	end
	if (
		( L4_expected_prev !== 1'bx ) && ( L4_prev !== L4_expected_prev )
		&& ((L4_expected_prev !== last_L4_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L4_expected_prev);
		$display ("     Real value = %b", L4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_L4_exp = L4_expected_prev;
	end
	if (
		( L5_expected_prev !== 1'bx ) && ( L5_prev !== L5_expected_prev )
		&& ((L5_expected_prev !== last_L5_exp) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L5_expected_prev);
		$display ("     Real value = %b", L5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_L5_exp = L5_expected_prev;
	end
	if (
		( L6_expected_prev !== 1'bx ) && ( L6_prev !== L6_expected_prev )
		&& ((L6_expected_prev !== last_L6_exp) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L6_expected_prev);
		$display ("     Real value = %b", L6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_L6_exp = L6_expected_prev;
	end
	if (
		( NSG_expected_prev !== 1'bx ) && ( NSG_prev !== NSG_expected_prev )
		&& ((NSG_expected_prev !== last_NSG_exp) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NSG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NSG_expected_prev);
		$display ("     Real value = %b", NSG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_NSG_exp = NSG_expected_prev;
	end
	if (
		( NSR_expected_prev !== 1'bx ) && ( NSR_prev !== NSR_expected_prev )
		&& ((NSR_expected_prev !== last_NSR_exp) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NSR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NSR_expected_prev);
		$display ("     Real value = %b", NSR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_NSR_exp = NSR_expected_prev;
	end
	if (
		( NSY_expected_prev !== 1'bx ) && ( NSY_prev !== NSY_expected_prev )
		&& ((NSY_expected_prev !== last_NSY_exp) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NSY :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NSY_expected_prev);
		$display ("     Real value = %b", NSY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_NSY_exp = NSY_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module Final_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CL;
reg CLK;
reg RST;
// wires                                               
wire a0;
wire a1;
wire a2;
wire a3;
wire a4;
wire a5;
wire a6;
wire a7;
wire EWG;
wire EWR;
wire EWY;
wire H0;
wire H1;
wire H2;
wire H3;
wire H4;
wire H5;
wire H6;
wire L0;
wire L1;
wire L2;
wire L3;
wire L4;
wire L5;
wire L6;
wire NSG;
wire NSR;
wire NSY;

wire sampler;                             

// assign statements (if any)                          
Final i1 (
// port map - connection between master ports and signals/registers   
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.a4(a4),
	.a5(a5),
	.a6(a6),
	.a7(a7),
	.CL(CL),
	.CLK(CLK),
	.EWG(EWG),
	.EWR(EWR),
	.EWY(EWY),
	.H0(H0),
	.H1(H1),
	.H2(H2),
	.H3(H3),
	.H4(H4),
	.H5(H5),
	.H6(H6),
	.L0(L0),
	.L1(L1),
	.L2(L2),
	.L3(L3),
	.L4(L4),
	.L5(L5),
	.L6(L6),
	.NSG(NSG),
	.NSR(NSR),
	.NSY(NSY),
	.RST(RST)
);

// CL
initial
begin
	CL = 1'b1;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// RST
initial
begin
	RST = 1'b1;
end 

Final_vlg_sample_tst tb_sample (
	.CL(CL),
	.CLK(CLK),
	.RST(RST),
	.sampler_tx(sampler)
);

Final_vlg_check_tst tb_out(
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.a4(a4),
	.a5(a5),
	.a6(a6),
	.a7(a7),
	.EWG(EWG),
	.EWR(EWR),
	.EWY(EWY),
	.H0(H0),
	.H1(H1),
	.H2(H2),
	.H3(H3),
	.H4(H4),
	.H5(H5),
	.H6(H6),
	.L0(L0),
	.L1(L1),
	.L2(L2),
	.L3(L3),
	.L4(L4),
	.L5(L5),
	.L6(L6),
	.NSG(NSG),
	.NSR(NSR),
	.NSY(NSY),
	.sampler_rx(sampler)
);
endmodule

